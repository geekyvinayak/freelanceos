name: Database Reset Automation

# Schedule the workflow to run daily at midnight UTC
on:
  schedule:
    - cron: '0 0 * * *'  # Daily at midnight UTC
  
  # Allow manual triggering from GitHub Actions UI
  workflow_dispatch:
    inputs:
      force:
        description: 'Force reset even if disabled'
        required: false
        default: 'false'
        type: boolean
      dry_run:
        description: 'Perform a dry run without actual reset'
        required: false
        default: 'false'
        type: boolean

# Set environment variables for the workflow
env:
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
  RESET_WEBHOOK_URL: ${{ secrets.RESET_WEBHOOK_URL }}

jobs:
  database-reset:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --only=production
      
      - name: Validate environment
        run: |
          if [ -z "$SUPABASE_URL" ]; then
            echo "‚ùå SUPABASE_URL secret is not set"
            exit 1
          fi
          
          if [ -z "$SUPABASE_SERVICE_ROLE_KEY" ]; then
            echo "‚ùå SUPABASE_SERVICE_ROLE_KEY secret is not set"
            exit 1
          fi
          
          echo "‚úÖ Environment validation passed"
      
      - name: Execute database reset
        run: |
          # Build command with options
          CMD="node scripts/reset-automation.js"
          
          if [ "${{ github.event.inputs.force }}" = "true" ]; then
            CMD="$CMD --force"
            echo "üîß Force reset enabled"
          fi
          
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            CMD="$CMD --dry-run"
            echo "üîç Dry run mode enabled"
          fi
          
          echo "üöÄ Executing: $CMD"
          $CMD
        
        # Continue on error to ensure cleanup steps run
        continue-on-error: true
        id: reset
      
      - name: Check reset result
        run: |
          if [ "${{ steps.reset.outcome }}" = "success" ]; then
            echo "‚úÖ Database reset completed successfully"
            echo "RESET_STATUS=success" >> $GITHUB_ENV
          else
            echo "‚ùå Database reset failed"
            echo "RESET_STATUS=failure" >> $GITHUB_ENV
          fi
      
      - name: Send Slack notification (on failure)
        if: env.RESET_STATUS == 'failure' && secrets.SLACK_WEBHOOK_URL
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: |
            üö® Database reset automation failed!
            
            Repository: ${{ github.repository }}
            Workflow: ${{ github.workflow }}
            Run: ${{ github.run_number }}
            
            Please check the logs and investigate the issue.
      
      - name: Send Discord notification (on success)
        if: env.RESET_STATUS == 'success' && secrets.DISCORD_WEBHOOK_URL
        run: |
          curl -H "Content-Type: application/json" \
               -d '{
                 "embeds": [{
                   "title": "‚úÖ Database Reset Completed",
                   "description": "Automated database reset executed successfully",
                   "color": 3066993,
                   "fields": [
                     {"name": "Repository", "value": "${{ github.repository }}", "inline": true},
                     {"name": "Workflow", "value": "${{ github.workflow }}", "inline": true},
                     {"name": "Run Number", "value": "${{ github.run_number }}", "inline": true}
                   ],
                   "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
                 }]
               }' \
               ${{ secrets.DISCORD_WEBHOOK_URL }}
      
      - name: Create issue on failure
        if: env.RESET_STATUS == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const title = `Database Reset Failed - ${new Date().toISOString().split('T')[0]}`;
            const body = `
            ## Database Reset Automation Failure
            
            **Workflow Run:** [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            **Timestamp:** ${new Date().toISOString()}
            **Triggered by:** ${{ github.event_name }}
            
            ### Details
            The automated database reset process failed during execution. Please investigate the logs and resolve the issue.
            
            ### Next Steps
            1. Check the workflow logs for error details
            2. Verify Supabase service status
            3. Validate environment variables and secrets
            4. Test the reset function manually if needed
            5. Close this issue once resolved
            
            ### Labels
            - \`bug\`
            - \`automation\`
            - \`database\`
            - \`urgent\`
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['bug', 'automation', 'database', 'urgent']
            });
      
      - name: Upload logs as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: reset-logs-${{ github.run_number }}
          path: |
            /tmp/reset-*.log
            ~/.npm/_logs/
          retention-days: 30

# Additional workflow for manual testing
  test-reset:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Test reset script
        run: |
          echo "üß™ Testing reset automation script..."
          node scripts/reset-automation.js --dry-run
          echo "‚úÖ Test completed successfully"

# Workflow for monitoring reset health
  health-check:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    
    steps:
      - name: Check Supabase health
        run: |
          echo "üè• Checking Supabase health..."
          
          # Basic health check
          response=$(curl -s -o /dev/null -w "%{http_code}" "$SUPABASE_URL/rest/v1/" \
            -H "apikey: ${{ secrets.SUPABASE_ANON_KEY }}")
          
          if [ "$response" = "200" ]; then
            echo "‚úÖ Supabase is healthy"
          else
            echo "‚ùå Supabase health check failed (HTTP $response)"
            exit 1
          fi
      
      - name: Verify reset function availability
        run: |
          echo "üîç Checking reset function availability..."
          
          # Check if the function exists (should return 401 without auth)
          response=$(curl -s -o /dev/null -w "%{http_code}" \
            "$SUPABASE_URL/functions/v1/database-reset" \
            -X POST \
            -H "Content-Type: application/json")
          
          if [ "$response" = "401" ] || [ "$response" = "403" ]; then
            echo "‚úÖ Reset function is available"
          else
            echo "‚ùå Reset function check failed (HTTP $response)"
            exit 1
          fi
